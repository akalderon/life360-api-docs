openapi: 3.0.0
info:
  version: '3'

  title: Life360

  description: |
    This is an **unofficial** API documentation for the REST API used by the Life360 web client.

externalDocs:
  description: Find out how more about Life360.
  url: 'https://www.life360.com/'

tags:
  - name: Authentication
    description: Operations for authenticating with the API
  - name: Circles
    description: Operations for retrieving information about Circles
  - name: Places
    description: Operations for retrieving information about Places
  - name: Members
    description: Operations for retrieving information about Members

servers:
  - url: 'https://life360/api/v3'

paths:
  '/oauth2/token.json':
    post:
      security:
        - Life360Auth: []

      tags:
        - Authentication

      summary: Generate an access token

      description: |
        Generates an access token for authenicating further API requests.

      operationId: generateToken

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: "password"
                username:
                  type: string
                  example: "example@email.com"
                password:
                  type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '403':
          description: Forbidden

  '/circles':
    get:
      tags:
        - Circles

      summary: Get all Circles

      description: |
        Get information about all of the Circles you belong to.

      operationId: getCircles

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CircleInformation'
        '403':
          description: Forbidden

  '/circles/{circle}':
    get:
      tags:
        - Circles

      summary: Get Circle

      description: |
        Get detailed information about a Circle you belong to.

      operationId: getCircle

      parameters:
        - name: circle
          in: path
          description: The Circle to be fetched
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CircleInformation'
                  - $ref: '#/components/schemas/CircleMembers'
        '403':
          description: Forbidden
        '404':
          description: Circle not found

  '/circles/{circle}/places':
    get:
      tags:
        - Circles
        - Places

      summary: Get Places

      description: |
        Get all of the Places that are defined for a Circle.

      operationId: getPlaces

      parameters:
        - name: circle
          in: path
          description: The Circle to be fetched
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '403':
          description: Forbidden
        '404':
          description: Circle not found

  '/circles/{circle}/places/{place}':
    get:
      tags:
        - Circles
        - Places

      summary: Get Place

      description: |
        Get detailed information about a Place.

      operationId: getPlace

      parameters:
        - name: circle
          in: path
          description: The Circle of the Place
          required: true
          schema:
            type: string
        - name: place
          in: path
          description: The Place to be fetched
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '403':
          description: Forbidden
        '404':
          description: Place not found

  '/circles/{circle}/members':
    get:
      tags:
        - Circles
        - Members

      summary: Get Members

      description: |
        Get all of the Members that belong to a Circle.

      operationId: getMembers

      parameters:
        - name: circle
          in: path
          description: The Circle to be fetched
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/MemberBasicInfo'
                    - $ref: '#/components/schemas/MemberDetailedInfo'

        '403':
          description: Forbidden
        '404':
          description: Circle not found

  '/circles/{circle}/members/{member}':
    get:
      tags:
        - Members

      summary: Get Member

      description: |
        Get detailed information about a Member.

      operationId: getMember

      parameters:
        - name: circle
          in: path
          description: The Circle of the Member
          required: true
          schema:
            type: string
        - name: member
          in: path
          description: The Member to be fetched
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/MemberBasicInfo'
                  - $ref: '#/components/schemas/MemberDetailedInfo'
        '403':
          description: Forbidden
        '404':
          description: Member not found

  '/circles/{circle}/members/{member}/request':
    post:
      tags:
        - Members

      summary: Force a Member update

      description: |
        Forces an update for a Member's location.

      parameters:
        - name: circle
          in: path
          description: The Circle of the Member
          required: true
          schema:
            type: string
        - name: member
          in: path
          description: The Member to be updated
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    $ref: '#/components/schemas/Id'
                  isPollable:
                    type: string
                    format: boolean
                    example: "1"
        '403':
          description: Forbidden
        '404':
          description: Member not found

  '/circles/members/request/{request}':
    get:
      tags:
        - Members

      summary: Get Member update status

      description: |
        Gets the status of a requested update for a Member's location.

      parameters:
        - name: request
          in: path
          description: The requested Update
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    $ref: '#/components/schemas/Id'
                  groupId:
                    $ref: '#/components/schemas/Id'
                  location:
                    $ref: '#/components/schemas/Location'
        '403':
          description: Forbidden
        '404':
          description: Request not found

components:
  schemas:
    Id:
      description: Unique ID
      type: string
      format: uuid
      example: "b42ece6c-47b8-4061-a672-d55fd8211ce3"
    Token:
      type: object
      properties:
        access_token:
          type: string
          example: "MDBkZDNmdBa1DBiZC00YmI0LWJiYjctMjZkNWI1YjczODkx"
        token_type:
          type: string
          example: "Bearer"
        onboarding:
          type: number
          format: boolean
          example: 0
        user:
          allOf:
            - $ref: '#/components/schemas/MemberBasicInfo'
            - $ref: '#/components/schemas/MemberSettings'
        cobranding:
          type: array
          items:
            type: object
        promotions:
          type: array
          items:
            type: object
        state:
          type: string

    CircleInformation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: "Smith Family"
        color:
          type: string
          format: hex
        type:
          type: string
          example: "basic"
        createdAt:
          type: string
          example: "1493252439"
        memberCount:
          type: string
          example: "2"
        unreadMessages:
          type: string
          example: "3"
        unreadNotifications:
          type: string
          example: "0"
        features:
          type: object
    CircleMembers:
      type: object
      properties:
        members:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MemberBasicInfo'
              - $ref: '#/components/schemas/MemberDetailedInfo'
    Place:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        ownerId:
          $ref: '#/components/schemas/Id'
        circleId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: "Home"
        latitude:
          type: string
          format: latitude
          example: "45.4333527"
        longitude:
          type: string
          format: longitude
          example: "-71.0591925"
        radius:
          type: string
          example: "50"
        type:
          type: string
        typeLabel:
          type: string
    MemberBasicInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstName:
          type: string
          example: "Joe"
        lastName:
          type: string
          example: "Smith"
        loginEmail:
          type: string
          format: email
          example: "example@email.com"
        loginPhone:
          type: string
          format: phone
          example: "+15555555555"
        avatar:
          type: string
          format: url
        communications:
          type: array
          items:
            $ref: '#/components/schemas/Communication'
    MemberDetailedInfo:
      type: object
      properties:
        isAdmin:
          type: string
          format: boolean
          example: "0"
        pinNumber:
          type: string
        activity:
          type: string
        createdAt:
          type: string
          example: "1493252626"
        medical:
          type: string
        relation:
          type: string
        features:
          $ref: '#/components/schemas/Features'
        issues:
          $ref: '#/components/schemas/Issues'
        location:
          $ref: '#/components/schemas/Location'
    MemberSettings:
      type: object
      properties:
        locale:
          type: string
          example: "en_US"
        language:
          type: string
          example: "en"
        created:
          type: string
          format: date
          example: "2017-04-26 17:20:39"
        settings:
          type: object
          properties:
            map:
              type: object
              properites:
                police:
                  type: string
                  format: boolean
                  example: "1"
                fire:
                  type: string
                  format: boolean
                  example: "0"
                hospital:
                  type: string
                  format: boolean
                  example: "1"
                sexOffenders:
                  type: string
                  format: boolean
                  example: "0"
                crime:
                  type: string
                  format: boolean
                  example: "1"
                crimeDuration:
                  type: string
                  format: boolean
                  example: "1"
                family:
                  type: string
                  format: boolean
                  example: "1"
                advisor:
                  type: string
                  format: boolean
                  example: "1"
                placeRadius:
                  type: string
                  format: boolean
                  example: "1"
                memberRadius:
                  type: string
                  format: boolean
                  example: "0"
            alerts:
              type: object
              properties:
                crime:
                  type: string
                  format: boolean
                  example: "0"
                sound:
                  type: string
                  format: boolean
                  example: "1"
            zendesk:
              type: object
              properties:
                sdk_enabled:
                  type: string
                  example: "ON"
            locale:
              type: string
              example: "en_US"
            unitOfMeasure:
              type: string
              example: "i"
            dateFormat:
              type: string
              example: "mdy12"
            timeZone:
              type: string
              example: "America\/New_York"
        cobranding:
          type: array
          items:
            type: object
    Features:
      type: object
    Issues:
      type: object
    Location:
      type: object
      properties:
        latitude:
          type: string
          format: latitude
          example: "45.4333527"
        longitude:
          type: string
          format: longitude
          example: "-71.0591925"
        accuracy:
          type: string
          example: "50"
        startTimestamp:
          type: number
          example: 1550279521
        endTimestamp:
          type: string
          example: "1550320040"
        since:
          type: number
          example: 1550279521
        timestamp:
          type: string
          example: "1550320040"
        name:
          type: string
          description: Name of the Place for this location
          example: "Home"
        placeType:
          type: string
        source:
          type: string
          example: "l"
        sourceId:
          $ref: '#/components/schemas/Id'
        address1:
          type: string
          example: "Home"
        address2:
          type: string
        shortAddress:
          type: string
        inTransit:
          type: string
          format: boolean
          example: "1"
        tripId:
          $ref: '#/components/schemas/Id'
        driveSDKStatus:
          type: string
        battery:
          type: string
          format: percent
          example: "93"
        charge:
          type: string
          format: boolean
          example: "0"
        wifiState:
          type: string
          format: boolean
          example: "1"
        speed:
          type: number
          example: 12
        isDriving:
          type: string
          format: boolean
          example: "0"
    Communication:
      type: object
      properties:
        channel:
          type: string
          example: "Voice"
        value:
          type: string
          example: "+15555555555"
        type:
          type: string
          example: "Mobile"
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    Life360Auth:
      description: |
        A hardcoded authenication, used to authenticate the client when generating an access token.
      type: http
      scheme: basic
    BearerToken:
      description: |
        An authenication generated using the "Generate an access token" request.
      type: http
      scheme: bearer

security:
  - BearerToken: []
